name: deploy dev

on:
  push:
    tags:
      - 'stage-v*'  # Only run for tags with the prefix "stage-v"
    branches:
      - develop
      - bugfix/*
  workflow_dispatch:
    inputs:
      env:
        description: 'Environment (dev/test/prod/...)'
        required: true
        default: 'dev'

env:
  REPOSITORY: tangotew/afi-load-board-app

jobs:
  prepare:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && contains(github.ref, 'bugfix/')) || github.event_name == 'workflow_dispatch' 
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Extract tag based on environment from manifest.yaml
      run: |
        TAG=$(grep -A1 "${{ github.event.inputs.env }}:" manifest.yaml | grep 'version:' | awk '{print $2}')
        echo "RELEASE_TAG=${TAG}" >> $GITHUB_ENV

    - name: Create Release      
      uses: ncipollo/release-action@v1.13.0
      with:
        tag: ${{ env.RELEASE_TAG }}
        name: Prerelease ${{ env.RELEASE_TAG }}
        artifacts: |
          build/*
        draft: false
        prerelease: true
        body: |
            Changes in this Release
            - Added Automation for docker build and push
            - Added autodeployment pipeline 
        repo: ${{ github.repository }}

  build_and_push:
    needs: [prepare]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Determine tag for image
      run: echo "RELEASE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

    # - name: Login to DockerHub
    #   uses: docker/login-action@v1
    #   with:
    #     username: ${{ secrets.DOCKERHUB_USERNAME }}
    #     password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set Docker Hub credentials
      run: |
        echo "${{ secrets.DOCKER_USERNAME }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    - name: Check if Docker image exists
      id: check-image
      run: |
        DOCKER_IMAGE="${{env.REPOSITORY}}:${{ env.RELEASE_TAG }}"
        IMAGE_CHECK=$(curl -s -o /dev/null -w "%{http_code}" "https://hub.docker.com/v2/repositories/${DOCKER_IMAGE}/tags/${{ env.RELEASE_TAG }}")
        if [ $IMAGE_CHECK -eq 200 ]; then
          echo "Image already exists on Docker Hub"
          echo "image_exists=true" >> $GITHUB_OUTPUT
        else
          echo "Image does not exist on Docker Hub"
          echo "image_exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Build and push Docker image
      if: steps.check-image.outputs.image_exists == 'false'
      run: |
        DOCKER_IMAGE="yourusername/yourimage:${{ github.sha }}"
        docker build -t $DOCKER_IMAGE .
        docker push $DOCKER_IMAGE
        
    # - name: Build and push
    #   uses: docker/build-push-action@v2
    #   with:
    #     context: .
    #     push: true
    #     tags: ${{ env.REPOSITORY }}:${{ env.RELEASE_TAG }}

    outputs:
      image_digest: ${{ env.REPOSITORY }}:${{ env.RELEASE_TAG }}

  
  # deploy:
  #   needs: build_and_push
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout files
  #       uses: actions/checkout@v3

  #     - name: Get Tag
  #       run: echo "RELEASE_TAG=${{ needs.build_and_push.outputs.image_digest }}" >> $GITHUB_ENV

  #     - name: Install doctl
  #       uses: digitalocean/action-doctl@v2
  #       with:
  #         token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

  #     - name: Provision Droplet and deploy container
  #       run: |
  #         doctl compute droplet create afi-load-board-app \
  #           --tag-names ${{ env.RELEASE_TAG }} \
  #           --region sfo3 \
  #           --size s-1vcpu-1gb \
  #           --image docker-20-04 \
  #           --ssh-keys ${{ secrets.DIGITALOCEAN_SSH_KEY_FINGERPRINT }} \
  #           --wait \
  #           --enable-monitoring
     
          
