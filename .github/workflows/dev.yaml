name: deploy dev

on:
  push:
    tags:
      - 'stage-v*'  # Only run for tags with the prefix "stage-v"
    branches:
      - develop
      - bugfix/*
  workflow_dispatch:
    inputs:
      env:
        description: 'Environment (dev/test/prod/...)'
        required: true
        default: 'dev'

env:
  REPOSITORY: tangotew/afi-load-board-app

jobs:
  prepare:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && contains(github.ref, 'bugfix/')) || github.event_name == 'workflow_dispatch' 
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Extract tag based on environment from manifest.yaml
      # if: github.ref == 'refs/heads/main'
      if: github.event_name == 'push'
      run: |
        ENV=${{ github.event.inputs.env || 'prod' }}
        TAG=$(grep -A1 "${ENV}:" manifest.yaml | grep 'version:' | awk '{print $2}')
        echo "RELEASE_TAG=${{env.REPOSITORY}}:${TAG}" >> $GITHUB_ENV
        echo "TAG=${TAG}" >> $GITHUB_ENV
        echo $TAG
        echo "${{env.RELEASE_TAG}}"
    

    - name: Use SHA for tag if not main
      if: github.ref == 'refs/heads/main'
      run: echo "RELEASE_TAG=${{ github.sha }}" >> $GITHUB_ENV
      
    - name: Create Git Tag
      # if: github.ref == 'refs/heads/main'
      if: github.event_name == 'push'
      run: |
        git tag -a v${{ env.TAG }} -m "Release v${{ env.TAG }}"
        git push origin v${{ github.sha }}

    - name: Create Release
      # if: github.ref == 'refs/heads/main'
      if: github.event_name == 'push'
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ env.TAG }}
        name: Prerelease ${{ env.TAG }}
        artifacts: |
          build/*
        draft: false
        prerelease: true
        body: |
            Changes in this Release
            - Added Automation for docker build and push
            - Added autodeployment pipeline 
        repo: ${{ github.repository }}
    
    outputs:
      TAG: "${{env.RELEASE_TAG}}"

  # build_and_push:
  #   needs: [prepare]
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v3

  #   - name: Determine tag for image
  #     run: echo "RELEASE_TAG=${{needs.prepare.outputs.TAG}}" >> $GITHUB_ENV

    # - name: Login to DockerHub
    #   uses: docker/login-action@v1
    #   with:
    #     username: ${{ secrets.DOCKERHUB_USERNAME }}
    #     password: ${{ secrets.DOCKERHUB_TOKEN }}

    # - name: Set Docker Hub credentials
    #   run: |
    #     echo "${{ secrets.DOCKER_USERNAME }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
    #   env:
    #     DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
    #     DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    # - name: Check if Docker image exists
    #   id: check-image
    #   run: |
    #     DOCKER_IMAGE="${{env.REPOSITORY}}:${{ env.RELEASE_TAG }}"
    #     IMAGE_CHECK=$(curl -s -o /dev/null -w "%{http_code}" "https://hub.docker.com/v2/repositories/${DOCKER_IMAGE}/tags/${{ env.RELEASE_TAG }}")
    #     if [ $IMAGE_CHECK -eq 200 ]; then
    #       echo "Image already exists on Docker Hub"
    #       echo "image_exists=true" >> $GITHUB_OUTPUT
    #     else
    #       echo "Image does not exist on Docker Hub"
    #       echo "image_exists=false" >> $GITHUB_OUTPUT
    #     fi
    
    # - name: Build and push Docker image
    #   if: steps.check-image.outputs.image_exists == 'false'
    #   run: |
    #     DOCKER_IMAGE="${{env.REPOSITORY}}:${{ env.RELEASE_TAG }}"
    #     docker build -t $DOCKER_IMAGE .
    #     docker push $DOCKER_IMAGE
    
    # - name: Display tag
    #   run: echo "::notice title='Tag'::${{env.RELEASE_TAG}}"
  
   
    # - name: Build and push
    #   uses: docker/build-push-action@v2
    #   with:
    #     context: .
    #     push: true
    #     tags: ${{ env.REPOSITORY }}:${{ env.RELEASE_TAG }}

    # outputs:
    #   image_digest: ${{ env.REPOSITORY }}:${{ env.RELEASE_TAG }}

  
  # deploy:
  #   needs: build_and_push
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout files
  #       uses: actions/checkout@v3

  #     - name: Get Tag
  #       run: echo "RELEASE_TAG=${{ needs.build_and_push.outputs.image_digest }}" >> $GITHUB_ENV

  #     - name: Install doctl
  #       uses: digitalocean/action-doctl@v2
  #       with:
  #         token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

  #     - name: Provision Droplet and deploy container
  #       run: |
  #         doctl compute droplet create afi-load-board-app \
  #           --tag-names ${{ env.RELEASE_TAG }} \
  #           --region sfo3 \
  #           --size s-1vcpu-1gb \
  #           --image docker-20-04 \
  #           --ssh-keys ${{ secrets.DIGITALOCEAN_SSH_KEY_FINGERPRINT }} \
  #           --wait \
  #           --enable-monitoring
     
          
